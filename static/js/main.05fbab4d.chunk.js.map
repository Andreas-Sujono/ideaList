{"version":3,"sources":["constants/Post/post.constant.js","components/sharedComponents/Loading/index.js","components/Routes/data.js","components/Routes/Routes.js","components/Routes/index.js","reducers/Post/reducers/general.reducer.js","reducers/Post/index.js","reducers/Post/combined.js","reducers/Reviews/reducers/general.reducer.js","reducers/Reviews/index.js","reducers/Reviews/combined.js","store.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ActionTypes","GET_POST","postVariable","postPerPage","Loading","className","routesData","path","component","lazy","exact","ScrollToTop","prevProps","this","props","location","window","scrollTo","children","Component","withRouter","Routes","fallback","map","item","idx","key","initialState","postData","id","img","title","category","author","published_date","description","isSignedIn","isLoading","generalReducer","state","action","type","postReducer","combineReducers","reviewsData","reviewId","postId","userName","userId","reviewDate","review","like","reply","reviewsReducer","rootReducer","store","createStore","devToolsExtension","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05fbab4d.chunk.js","sourcesContent":["export const ActionTypes = {\n    GET_POST:'GET_POST'\n}\n\nexport const messages = {\n    GET_POST_SUCCESS:'success fetching posts data',\n    GET_POST_ERROR:'Failing fetch data from server'\n}\n\nexport const postVariable = {\n    postPerPage:3\n}","import React from 'react'\n\nimport './style.scss'\n\nconst Loading = () => {\n    return(\n        <div className=\"loadingPageContainer\">\n            <div className=\"loadingPage\">\n                <div className=\"loaderSpin\"></div>\n                <h4> Loading....</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Loading","import {lazy} from 'react'\n\nconst routesData = [\n    {\n        path:'/',\n        component: lazy( () => import('components/mainComponents/Home')),\n        exact:true\n    },\n    {\n        path:'/page/:pageNumber',\n        component: lazy( () => import('components/mainComponents/Home')),\n    },\n    {\n        path:'/post/:id',\n        component: lazy( () => import('components/mainComponents/NewsSingle')),\n        exact:true\n    },\n    {\n        path:'/about',\n        component: lazy( () => import('components/mainComponents/About')),\n        exact:true\n    },\n    {\n        path:'/login',\n        component: lazy( () => import('components/mainComponents/Login')),\n        exact:true\n    },\n    {\n        path:'/signUp',\n        component: lazy( () => import('components/mainComponents/Signup')),\n        exact:true\n    },\n    {\n        path:'/admin',\n        component: lazy( () => import('components/mainComponents/Admin')),\n        exact:true\n    },\n    {\n        path:'/test/loading',\n        component: lazy( () => import('components/sharedComponents/Loading')),\n        exact:true\n    }\n]\n\nexport default routesData","import React, { Component,Suspense } from 'react';\nimport {HashRouter as Router, Route, Switch,withRouter} from 'react-router-dom'\nimport Loading from 'components/sharedComponents/Loading'\nimport routesData from './data'\n\n\nclass ScrollToTop extends Component {\n    componentDidUpdate(prevProps) {\n      if (this.props.location !== prevProps.location) {\n        window.scrollTo(0, 0)\n      }\n    }\n  \n    render() {\n      return this.props.children\n    }\n  }\n  \nScrollToTop = withRouter(ScrollToTop)\n\nclass Routes extends Component {\n    render() {\n        return (\n            <div className=\"routes\">\n                <Router>\n                    <ScrollToTop>\n                    <Suspense fallback={<Loading/>}>\n                        <Switch>\n                            {\n                                routesData.map( (item,idx) => (\n                                    <Route key={`${item.path}_${idx}`} {...item}/>\n                                ))\n                            }\n                        </Switch>\n                    </Suspense>\n                    </ScrollToTop>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default Routes;","import Routes from './Routes'\n\nexport default Routes","import {ActionTypes} from 'constants/Post/post.constant'\n\nconst initialState = {\n    postData : [\n        {\n            id:1,\n            img:\"http://d279m997dpfwgl.cloudfront.net/wp/2019/07/AP_19143090374548-e1564788889887-1000x597.jpg\",\n            title:'Five key Premier League matches to watch in the coming weeks as season kicks off',\n            category:'Sports',\n            author:'Andreas Sujono',\n            published_date:'10/08/2019',\n            description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \\nLorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \\nLorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \"\n        },\n        {\n            id:2,\n            img:\"https://www.straitstimes.com/sites/default/files/styles/article_pictrure_780x520_/public/articles/2019/08/07/fh-worklife-07_2x.jpg?itok=wV6i_lDs&timestamp=1565156884\",\n            title:'Singapore ranks 32 out of 40 in new index on work-life balance',\n            category:'Life',\n            author:'Andreas Sujono',\n            published_date:'10/08/2019',\n            description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \\nLorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \"\n        },\n        {\n            id:3,\n            img:\"https://www.straitstimes.com/sites/default/files/styles/article_pictrure_780x520_/public/articles/2019/08/01/yq-mincedmeatnoodles-01082019.jpg?itok=O61TCwHj&timestamp=1564648937\",\n            title:'Noodle dishes for calorie counters at Hougang Fishball Minced Meat Noodles',\n            category:'Food',\n            author:'Andreas Sujono',\n            published_date:'10/08/2019',\n            description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \\nLorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \"\n        },\n        {\n            id:4,\n            img:\"https://www.straitstimes.com/sites/default/files/styles/article_pictrure_780x520_/public/articles/2019/08/01/yq-mincedmeatnoodles-01082019.jpg?itok=O61TCwHj&timestamp=1564648937\",\n            title:'Noodle dishes for calorie counters at Hougang Fishball Minced Meat Noodles',\n            category:'Food',\n            author:'Andreas Sujono',\n            published_date:'10/08/2019',\n            description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \\nLorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \"\n        },\n        {\n            id:5,\n            img:\"https://www.straitstimes.com/sites/default/files/styles/article_pictrure_780x520_/public/articles/2019/08/07/fh-worklife-07_2x.jpg?itok=wV6i_lDs&timestamp=1565156884\",\n            title:'Singapore ranks 32 out of 40 in new index on work-life balance',\n            category:'Life',\n            author:'Andreas Sujono',\n            published_date:'10/08/2019',\n            description:\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \\nLorem Ipsum is simply dummy text of the printing and typesetting industry. \\\n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown \\\n            printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries\\\n            \"\n        },\n    ],\n    isSignedIn:false,\n    isLoading: false\n}\n\nconst generalReducer = (state = initialState, action) => {\n    switch(action.type){\n        case ActionTypes.GET_POST:\n            return state\n        default:\n            return state\n    }\n}\n\nexport default generalReducer\n","import postReducer from './combined'\n\nexport default postReducer","import { combineReducers } from 'redux';\nimport generalReducer from './reducers/general.reducer'\n\nconst postReducer = combineReducers({\n    generalReducer\n})\n\nexport default postReducer\n\n","\n/*give mock data\n{\n         reviewId:<id>,\n         postId:<id>,\n         userName:<string>,\n         userId:<id>,\n         reviewDate:<date>,\n         review:<string>,\n         like:<int>,\n         reply:<int>,\n},\n*/\nconst initialState = {\n    reviewsData : [\n     {\n         reviewId:223231,\n         postId:1,\n         userName:'John',\n         userId:321421,\n         reviewDate:'20-Feb-2020',\n         review:'what a great news',\n         like:6,\n         reply:0,\n     },\n     {\n        reviewId:2233421,\n        postId:2,\n        userName:'John',\n        userId:321422,\n        reviewDate:'21-Feb-2020',\n        review:'Its funny that i can read arabic but i don’t really understand them HAHA',\n        like:6,\n        reply:0,\n    },\n    {\n        reviewId:31531,\n        postId:3,\n        userName:'John',\n        userId:321423,\n        reviewDate:'21-Feb-2020',\n        review:'what a great news3',\n        like:6,\n        reply:0,\n    },\n    {\n        reviewId:2243291,\n        postId:1,\n        userName:'Emily',\n        userId:321424,\n        reviewDate:'22-Feb-2020',\n        review:'what a great news4',\n        like:6,\n        reply:0,\n    },\n    ],\n    isSignedIn:false,\n    isLoading: false\n}\n\nconst generalReducer = (state = initialState, action) => {\n    switch(action.type){\n        default:\n            return state\n    }\n}\n\nexport default generalReducer\n","import reviewsReducer from './combined'\n\nexport default reviewsReducer","import { combineReducers } from 'redux';\nimport generalReducer from './reducers/general.reducer'\n\nconst reviewsReducer = combineReducers({\n    generalReducer\n})\n\nexport default reviewsReducer\n\n","import {createStore, combineReducers} from 'redux'\nimport postReducer from 'reducers/Post'\nimport reviewsReducer from 'reducers/Reviews'\n\nconst rootReducer = combineReducers({\n    postReducer,\n    reviewsReducer\n})\n\nconst store = createStore(rootReducer,\n    {},window.devToolsExtension && window.devToolsExtension()\n);\n\nexport default store\n","import App from './App'\n\nexport default App","import React from 'react';\nimport Routes from 'components/Routes'\nimport {Provider} from 'react-redux'\nimport store from 'store'\n\nimport './style.scss'\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Provider store ={store}>\n        <Routes/>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport '../node_modules/react-vis/dist/style.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}